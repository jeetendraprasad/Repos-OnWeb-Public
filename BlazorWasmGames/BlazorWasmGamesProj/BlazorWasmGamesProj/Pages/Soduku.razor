@page "/"
@page "/soduku"

<h3>Soduku</h3>
<br />

<div>
    <input type="text" name="rows_size" @bind=@rows placeholder="Rows" />
    <input type="text" name="cols_size" @bind=@cols placeholder="Columns" />
</div>

<br />

<input type="checkbox" id="edit-mode" name="edit-mode" @bind=@editMode>
<label for="edit-mode"> Edit?</label>
<br>


<br />

<div style="@GetSodukuStyle()">

    @for (int i = 0; i < cols; i++)
    {
        <div style="@GetRowStyle()">

            @for (int j = 0; j < rows; j++)
            {
                string blocId = GetBlockId(j, i);

                <div style="@GetBlockStyle(i*rows+j)" id="@blocId">

                    @for (int k = 0; k < cols; k++)
                    {
                        @for (int l = 0; l < rows; l++)
                        {
                            string cellId = GetCellId(blocId, k, l);

                            <div style="@GetCellStyle()" id="@cellId">
                                @cellId
                                <input type="text" style="overflow : hidden; width : 100%;" id="@(cellId+":L")" />
                                <br />
                                @for (int m = 0; m < rows * cols; m++)
                                {
                                    <button style="font-size: 0.5em;" id="@(cellId+":H"+(m+1).ToString())">@(m + 1)</button>
                                }
                            </div>
                        }
                    }

                </div>
            }

        </div>
    }

</div>


@code {

    int rows = 2;
    int cols = 2;
    bool editMode = true;

    int sodukuSizeInPx = 900;

    List<string> BasicHtmlColors = new List<string>() { "silver", "gray", "red", "yellow", "lime", "aqua", "teal", "olive", "fuchsia", "purple", "green", "maroon", "blue", "navy", "white", "black", };

    string blockIdPrefix = "B[{0},{1}]";
    string cellIdPrefix = "{0}:C[{1},{2}]";
    string cellHintPrefix = "{0}:C[{1},{2}]:H{0}";


    string GetSodukuStyle() => $"width: {sodukuSizeInPx}px;height: {sodukuSizeInPx}px;";
    string GetRowStyle() => $"width: {sodukuSizeInPx / cols}px;height: {sodukuSizeInPx / rows}px;float:left;";
    string GetBlockStyle(int colorIndex) => $"width: {sodukuSizeInPx / cols}px;height: {sodukuSizeInPx / rows}px;float:left;background-color:{BasicHtmlColors[colorIndex % BasicHtmlColors.Count]};";
    string GetBlockId(int x, int y) => string.Format(blockIdPrefix, x, y);
    string GetCellId(string blockId, int x, int y) => string.Format(cellIdPrefix, blockId, x, y);
    string GetCellStyle() => $"width: {sodukuSizeInPx / rows / cols}px;height: {sodukuSizeInPx / rows / cols}px;float:left;border: solid;"; // display:flex; flex-direction: column;font-size: 2em;

}