@page "/"
@page "/soduku"

@using System.Diagnostics
@using System.Timers;
@using BlazorWasmGamesProj.Code

@implements IDisposable

<h3>Soduku</h3>
<br />

<div>
    <input type="text" name="rows_size" @bind=@rowsBlock placeholder="Rows" />
    <input type="text" name="cols_size" @bind=@colsBlock placeholder="Columns" />
</div>

<br />

<input type="checkbox" id="edit-mode" name="edit-mode" @bind=@editMode>
<label for="edit-mode"> Edit?</label>
<br>


<br />

<div style="@GetSodukuStyle()">

    @for (int i = 0; i < colsBlock; i++)
    {
        <div style="@GetBlockRowStyle()">

            @for (int j = 0; j < rowsBlock; j++)
            {
                string blocId = GetBlockId(j, i);

                <div style="@GetBlockStyle(i*rowsBlock+j)" id="@blocId">

                    @for (int k = 0; k < colsBlock; k++)
                    {
                        @for (int l = 0; l < rowsBlock; l++)
                        {
                            string cellId = GetCellId(blocId, k, l);

                            <div class="@(cellId==highlightCell ? "highlight" : "")" style="@GetCellStyle()" id="@cellId">
                                @cellId
                                <input type="text" style="overflow : hidden; width : 100%;" id="@(cellId+":L")" />
                                <br />
                                @for (int m = 0; m < rowsBlock * colsBlock; m++)
                                {
                                    <button style="font-size: 0.5em;" id="@(cellId+":H"+(m+1).ToString())">@(m + 1)</button>
                                }
                            </div>
                        }
                    }

                </div>
            }

        </div>
    }

</div>

<br>
<button @onclick="( async () => await Debug1())">Debug</button>
<br />


@code {

    int rowsBlock = 3;
    int colsBlock = 2;

    bool editMode = true;

    int sodukuSizeInPx = 900;

    Timer timer = new Timer();

    bool debuggingOn = false;
    int index = 0;
    //string highlightBlock = "";
    string highlightCell = "";

    List<string> BasicHtmlColors = new List<string>() { "silver", "gray", "red", "yellow", "lime", "aqua", "teal", "olive", "fuchsia", "purple", "green", "maroon", "blue", "navy", "white", "black", };

    string blockIdPrefix = "B[{0},{1}]";                // block names are B[{0-based rows},{0-based cols}]
    string cellIdPrefix = "{0}:C[{1},{2}]";             // cell names are BLOCK_ID:[{0-based rows},{0-based cols}]


    string GetSodukuStyle() => $"width: {sodukuSizeInPx}px;height: {sodukuSizeInPx}px;";
    string GetBlockRowStyle() => $"width: {sodukuSizeInPx / colsBlock}px;height: {sodukuSizeInPx / rowsBlock}px;float:left;";
    string GetBlockStyle(int colorIndex) => $"width: {sodukuSizeInPx / colsBlock}px;height: {sodukuSizeInPx / rowsBlock}px;float:left;background-color:{BasicHtmlColors[colorIndex % BasicHtmlColors.Count]};";
    string GetBlockId(int x, int y) => string.Format(blockIdPrefix, x, y);
    string GetCellId(string blockId, int x, int y) => string.Format(cellIdPrefix, blockId, x, y);
    string GetCellStyle() => $"width: {sodukuSizeInPx / rowsBlock / colsBlock}px;height: {sodukuSizeInPx / rowsBlock / colsBlock}px;float:left;border: solid;"; // display:flex; flex-direction: column;font-size: 2em;

    List<string> SuHoriFullFlattened {
        get {
            List<string> list = SuHoriFull.Flatten();
            Console.WriteLine(string.Join("    ", list));
            return list;
        }
    }
    List<List<string>> SuHoriFull {
        get
        {
            List<List<string>> retVal = new();

            for (int i = 0; i < rowsBlock * colsBlock; i++)
            {
                //if(i == 1)
                {
                    List<string> list = GetSuHori(i);
                    retVal.Add(list);
                }
            }

            return retVal;
        }
    }

    // Get Solving Unit - Horigontal list
    List<string> GetSuHori(int rowNoSoduku)
    {
        List<string> retVal = new List<string>();

        int rowA = (int)((rowNoSoduku) / colsBlock);

        //Debug.Print("rowA = " + rowA.ToString());

        for (int j = 0; j < rowsBlock * colsBlock; j++)
        {
            int colA = (int)(j / rowsBlock);

            //Debug.Print("colA = " + colA.ToString());

            string blockId = GetBlockId(rowA, colA);

            retVal.Add(string.Format(cellIdPrefix, blockId, (int)(rowNoSoduku % colsBlock), (int)(j % rowsBlock)));
        }

        return retVal;
    }

    // Get Solving Unit - Vertical list
    List<string> GetSuVert(int colNoSoduku)
    {
        List<string> retVal = new List<string>();

        int colA = (int)(colNoSoduku / rowsBlock);

        //Debug.Print("colA = " + colA.ToString());

        for (int j = 0; j < rowsBlock * colsBlock; j++)
        {
            int rowA = (int)(j / colsBlock);

            //Debug.Print("rowA = " + rowA.ToString());

            string blockId = GetBlockId(rowA, colA);

            retVal.Add(string.Format(cellIdPrefix, blockId, (int)(j % colsBlock), (int)(colNoSoduku / rowsBlock) - 1));
        }

        return retVal;
    }

    // Get Solving Unit - for a block
    List<string> GetSuBlock(int colNoBlock, int rowNoBlock)
    {
        List<string> retVal = new List<string>();

        for (int i = 0; i < rowsBlock; i++)
            for (int j = 0; j < colsBlock; j++)
                retVal.Add(string.Format(cellIdPrefix, string.Format(blockIdPrefix, rowNoBlock - 1, colNoBlock - 1), j, i));


        return retVal;
    }

    async Task Debug1()
    {
        index = 0;
        debuggingOn = true;
        InitTimer();
        await Task.Delay(1);
        //DeInitTimer();
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    void InitTimer()
    {
        if (!timer.Enabled)
        {
            timer = new Timer();
            timer.Interval = 1000;
            timer.Elapsed += OnTimerElapsed;
            timer.Enabled = true;
        }
    }

    void DeInitTimer()
    {
        if (timer.Enabled)
        {
            timer.Stop();
            timer.Elapsed -= OnTimerElapsed;
            timer.Enabled = false;
            timer.Dispose();
        }

    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        //Console.WriteLine(DateTime.Now);

        //timer.Stop();

        if (debuggingOn)
        {
            List<string> cell = SuHoriFullFlattened;

            if (index > cell.Count)
            {
                debuggingOn = false;
                DeInitTimer();
                index = 0;
            }
            else if (index <= cell.Count && index >= 0)
            {
                highlightCell = cell[index++];
            }
            else
            {
                // wrong: 
                Debug.Assert(false);
            }

        }

        InvokeAsync(
            () =>
            {
                StateHasChanged();
            }
        );
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}