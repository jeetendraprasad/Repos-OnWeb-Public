
@using System.Text.RegularExpressions

<script>

</script>

<div>
    <h3>Enter Dimensions</h3>
    <input type="number" name="rows_size" id="rows_size" placeholder="Rows" @bind-value:get="RowsBlock" @bind-value:set="(e) => this.OnChange_RowsBlock(e, 1, string.Empty)" @bind-value:event="onchange" />
    <input type="number" name="cols_size" id="cols_size" placeholder="Cols" @bind:get="ColsBlock" @bind:set="(e) => this.OnChange_ColsBlock(e ?? string.Empty, 1)" @bind:event="oninput" />
</div>

@code {

    private async Task OnChange_RowsBlock(int value, int param1, string param2 = "")
    {
        Console.WriteLine($"text = {value} and param1 = {param1}, param2 = {param2}");
        RowsBlock = value;

        await Task.FromResult(0);
    }

    private void OnChange_ColsBlock(string value, int param1, string param2 = "")
    {
        Console.WriteLine($"text = {value} and param1 = {param1}, param2 = {param2}");


        var newValue = StrToIntDef(value ?? string.Empty, 0);

        if (newValue > 3)
            newValue = 3;
        else if (newValue <= 0)
            newValue = 0;

        ColsBlock = newValue.ToString();
    }


    public int RowsBlock { get; set; }
    string? ColsBlock { get; set; } = "2";

    public static int StrToIntDef(string s, int @default) =>
    int.TryParse(s, out int result) ? result : @default;
}
